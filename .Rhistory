data_list <- lapply(data_list, function(dataset) {
dataset$JOUR <- as.Date(dataset$JOUR, format = "%d/%m/%Y")
return(dataset)
})
# Print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
head(combined_data)
# Check for missing values
sum(is.na(combined_data))  # Total missing values in the dataset
sapply(combined_data, function(x) sum(is.na(x)))  # Missing values by column
```{r}
# Check for missing values
sum(is.na(data1))  # Total missing values in the dataset
sapply(data1, function(x) sum(is.na(x)))  # Missing values by column
# Check for missing values
sum(is.na(data2))  # Total missing values in the dataset
sapply(data2, function(x) sum(is.na(x)))  # Missing values by column
# Check for missing values
sum(is.na(data3))  # Total missing values in the dataset
sapply(data3, function(x) sum(is.na(x)))  # Missing values by column
# Calculate Z-scores
z_scores <- scale(combined_data)
#checking for outliers
# Select only numeric columns
numeric_columns <- combined_data[, sapply(combined_data, is.numeric)]
# Calculate Z-scores for numeric columns
z_scores <- scale(numeric_columns)
# Identify outliers using Z-scores
outliers_zscore <- which(abs(z_scores) > 3, arr.ind = TRUE)  # Z-score > 3
# Identify outliers using the IQR method
Q1 <- apply(numeric_columns, 2, function(x) quantile(x, 0.25, na.rm = TRUE))
# Ensure numeric_columns is a data frame with numeric columns only
numeric_columns <- combined_data[, sapply(combined_data, is.numeric), drop = FALSE]
# Check if numeric_columns is non-empty
if (ncol(numeric_columns) > 0) {
# Calculate Z-scores for numeric columns
z_scores <- scale(numeric_columns)
# Identify outliers using Z-scores
outliers_zscore <- which(abs(z_scores) > 3, arr.ind = TRUE)  # Z-score > 3
# Identify outliers using the IQR method
Q1 <- apply(numeric_columns, 2, function(x) quantile(x, 0.25, na.rm = TRUE))
Q3 <- apply(numeric_columns, 2, function(x) quantile(x, 0.75, na.rm = TRUE))
IQR <- Q3 - Q1
outliers_iqr <- which(
numeric_columns < (Q1 - 1.5 * IQR) | numeric_columns > (Q3 + 1.5 * IQR),
arr.ind = TRUE
)
# Output results
list(
Z_Score_Outliers = outliers_zscore,
IQR_Outliers = outliers_iqr
)
} else {
stop("No numeric columns found in the dataset.")
}
# Ensure numeric_columns is a data frame with numeric columns only
numeric_columns <- combined_data[, sapply(combined_data, is.numeric), drop = FALSE]
# Check if numeric_columns is non-empty
if (ncol(numeric_columns) > 0) {
# Calculate Z-scores for numeric columns
z_scores <- scale(numeric_columns)
# Identify outliers using Z-scores
outliers_zscore <- which(abs(z_scores) > 3, arr.ind = TRUE)  # Z-score > 3
# Identify outliers using the IQR method
Q1 <- apply(numeric_columns, 2, function(x) quantile(x, 0.25, na.rm = TRUE))
Q3 <- apply(numeric_columns, 2, function(x) quantile(x, 0.75, na.rm = TRUE))
IQR <- Q3 - Q1
outliers_iqr <- which(
numeric_columns < (Q1 - 1.5 * IQR) | numeric_columns > (Q3 + 1.5 * IQR),
arr.ind = TRUE
)
# Output results
list(
Z_Score_Outliers = outliers_zscore,
IQR_Outliers = outliers_iqr
)
} else {
stop("No numeric columns found in the dataset.")
}
# Ensure numeric_columns is a data frame with numeric columns only
numeric_columns <- combined_data[, sapply(combined_data, is.numeric), drop = FALSE]
# Check if numeric_columns is non-empty
if (ncol(numeric_columns) > 0) {
# Calculate Z-scores for numeric columns
z_scores <- scale(numeric_columns)
# Identify outliers using Z-scores
outliers_zscore <- which(abs(z_scores) > 3, arr.ind = TRUE)  # Z-score > 3
# Identify outliers using the IQR method
Q1 <- apply(numeric_columns, 2, function(x) quantile(x, 0.25, na.rm = TRUE))
Q3 <- apply(numeric_columns, 2, function(x) quantile(x, 0.75, na.rm = TRUE))
IQR <- Q3 - Q1
outliers_iqr <- which(
numeric_columns < (Q1 - 1.5 * IQR) | numeric_columns > (Q3 + 1.5 * IQR),
arr.ind = TRUE
)
# Output results
list(
Z_Score_Outliers = outliers_zscore,
IQR_Outliers = outliers_iqr
)
} else {
stop("No numeric columns found in the dataset.")
}
str(combined_data)  # Gives structure of the dataset including column names, types, and a preview of data
summary(combined_data)  # Summarizes each column, showing min, max, mean, etc.
# Select numeric columns
numeric_columns <- combined_data[, .(CODE_STIF_TRNS, ID_REFA_LDA, NB_VALD)]
# Calculate Z-scores
z_scores <- scale(numeric_columns)
# Find outliers using Z-score (absolute value greater than 3)
outliers_zscore <- which(abs(z_scores) > 3, arr.ind = TRUE)
outliers_zscore
# Summarizes each column, showing min, max, mean, etc.
# Calculate Q1, Q3, and IQR for each numeric column
Q1 <- apply(numeric_columns, 2, function(x) quantile(x, 0.25, na.rm = TRUE))
Q3 <- apply(numeric_columns, 2, function(x) quantile(x, 0.75, na.rm = TRUE))
IQR <- Q3 - Q1
# Identify outliers using IQR method
outliers_iqr <- list()
for (col in colnames(numeric_columns)) {
outliers_iqr[[col]] <- which(numeric_columns[[col]] < (Q1[col] - 1.5 * IQR[col]) |
numeric_columns[[col]] > (Q3[col] + 1.5 * IQR[col]))
}
outliers_iqr
View(combined_data)
str(combined_data)  # Gives structure of the dataset including column names, types, and a preview
# Boxplot for each numerical column
boxplot(combined_data$NB_VALD, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
# Boxplot for each numerical column
boxplot(combined_data$CODE_STIF_TRNS, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
# Boxplot for each numerical column
boxplot(combined_data$CODE_STIF_TRNS, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
boxplot(combined_data$CODE_STIF_RES, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
boxplot(combined_data$ID_REFA_LDA, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
combined_data$COD_STIF_TRNS <- as.integer(combined_data$COD_STIF_TRNS)
combined_data$CODE_STIF_RES <- as.integer(combined_data$CODE_STIF_RES)
combined_data$ COD_STIF_ARRET <- as.integer(combined_data$ COD_STIF_ARRET)
combined_data$COD_STIF_TRNS <- as.integer(combined_data$COD_STIF_TRNS)
combined_data$CODE_STIF_RES <- as.integer(combined_data$CODE_STIF_RES)
combined_data$ COD_STIF_ARRET <- as.integer(combined_data$ COD_STIF_ARRET)
str(combined_data)
library(data.table)
data1 <- fread("data/2018_S1_NB_FER.txt", header = TRUE, sep = "\t")
data2 <- fread("data/2018_S2_NB_FER.txt", header = TRUE, sep = "\t")
data3 <- fread("data/2019_S1_NB_FER.txt", header = TRUE, sep = "\t")
data4 <- fread("data/2019_S2_NB_FER.txt", header = TRUE, sep = "\t")
data5 <- fread("data/2020_S1_NB_FER.txt", header = TRUE, sep = "\t")
data6 <- fread("data/2020_S2_NB_FER.txt", header = TRUE, sep = "\t")
data7 <- fread("data/2021_S1_NB_FER.txt", header = TRUE, sep = "\t")
data8 <- fread("data/2021_S2_NB_FER.txt", header = TRUE, sep = "\t")
data9 <- fread("data/2022_S1_NB_FER.txt", header = TRUE, sep = "\t")
data10 <- fread("data/2022_S2_NB_FER.txt", header = TRUE, sep = ";")
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the column names and types
lapply(seq_along(data_list), function(i) {
cat("\n--- Structure of dataset", i, "---\n")
print(str(data_list[[i]]))
})
data11 <- fread("data/data-rf-2023-s1.csv", header = TRUE)
head(data11)
# Optionally, you can get just the column names and their respective types:
column_types <- sapply(data11, class)
print(column_types)
# Convert JOUR column from IDate to Date
data11[, JOUR := as.Date(JOUR)]
# Verify the change
str(data11)
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Convert 'JOUR' column to Date type for all datasets
data_list <- lapply(data_list, function(dataset) {
dataset$JOUR <- as.Date(dataset$JOUR, format = "%d/%m/%Y")
return(dataset)
})
# Print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Check for missing values
# Replace `?` with `NA` in the dataset
combined_data[combined_data == "?"] <- NA
combined_data$JOUR[combined_data$JOUR == "?"] <- NA
combined_data$COD_STIF_TRNS <- as.integer(combined_data$COD_STIF_TRNS)
combined_data$CODE_STIF_RES <- as.integer(combined_data$CODE_STIF_RES)
combined_data$ COD_STIF_ARRET <- as.integer(combined_data$ COD_STIF_ARRET)
str(combined_data)
combined_data$COD_STIF_TRNS <- as.integer(combined_data$COD_STIF_TRNS)
combined_data$CODE_STIF_RES <- as.integer(combined_data$CODE_STIF_RES)
combined_data$ COD_STIF_ARRET <- as.integer(combined_data$ COD_STIF_ARRET)
head(combined_data)
# Remplacer les valeurs "?" par NA dans tout le dataset
combined_data[combined_data == "?"] <- NA
combined_data[, COD_STIF_TRNS := as.integer(COD_STIF_TRNS)]
combined_data[, CODE_STIF_RES := as.integer(CODE_STIF_RES)]
combined_data[, COD_STIF_ARRET := as.integer(COD_STIF_ARRET)]
# Vérification des types des colonnes
str(combined_data)
# Suppression des colonnes créées par erreur (si elles existent)
combined_data[, COD_STIF_TRNS := NULL]
combined_data[, COD_STIF_ARRET := NULL]
# Conversion des colonnes en integer
combined_data[, COD_STIF_TRNS := as.integer(COD_STIF_TRNS)]
# Conversion des colonnes en integer
combined_data[, COD_STIF_TRNS := as.integer(COD_STIF_TRNS)]
# Conversion des colonnes en integer
combined_data[, COD_STIF_TRNS := as.integer(COD_STIF_TRNS)]
data1 <- fread("data/2018_S1_NB_FER.txt", header = TRUE, sep = "\t")
data2 <- fread("data/2018_S2_NB_FER.txt", header = TRUE, sep = "\t")
data3 <- fread("data/2019_S1_NB_FER.txt", header = TRUE, sep = "\t")
data4 <- fread("data/2019_S2_NB_FER.txt", header = TRUE, sep = "\t")
data5 <- fread("data/2020_S1_NB_FER.txt", header = TRUE, sep = "\t")
data6 <- fread("data/2020_S2_NB_FER.txt", header = TRUE, sep = "\t")
data7 <- fread("data/2021_S1_NB_FER.txt", header = TRUE, sep = "\t")
data8 <- fread("data/2021_S2_NB_FER.txt", header = TRUE, sep = "\t")
data9 <- fread("data/2022_S1_NB_FER.txt", header = TRUE, sep = "\t")
data10 <- fread("data/2022_S2_NB_FER.txt", header = TRUE, sep = ";")
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the column names and types
lapply(seq_along(data_list), function(i) {
cat("\n--- Structure of dataset", i, "---\n")
print(str(data_list[[i]]))
})
data11 <- fread("data/data-rf-2023-s1.csv", header = TRUE)
head(data11)
# Optionally, you can get just the column names and their respective types:
column_types <- sapply(data11, class)
print(column_types)
# Convert JOUR column from IDate to Date
data11[, JOUR := as.Date(JOUR)]
# Verify the change
str(data11)
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Convert 'JOUR' column to Date type for all datasets
data_list <- lapply(data_list, function(dataset) {
dataset$JOUR <- as.Date(dataset$JOUR, format = "%d/%m/%Y")
return(dataset)
})
# Print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
str(combined_data)  # Gives structure of the dataset including column names, types, and a preview
# Conversion des colonnes en integer
combined_data[, COD_STIF_TRNS := as.integer(COD_STIF_TRNS)]
str(combined_data)  # Gives structure of the dataset including column names, types, and a preview
# Conversion des colonnes en integer
combined_data[, CODE_STIF_TRNS := as.integer(CODE_STIF_TRNS)]
combined_data[, CODE_STIF_RES := as.integer(CODE_STIF_RES)]
combined_data[, CODE_STIF_ARRET := as.integer(CODE_STIF_ARRET)]
# Suppression des colonnes créées par erreur (si elles existent)
combined_data[, CODE_STIF_TRNS := NULL]
combined_data[, CODE_STIF_ARRET := NULL]
# Vérification des types des colonnes
str(combined_data)
head(combined_data)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
data1 <- fread("data/2018_S1_NB_FER.txt", header = TRUE, sep = "\t")
data2 <- fread("data/2018_S2_NB_FER.txt", header = TRUE, sep = "\t")
data3 <- fread("data/2019_S1_NB_FER.txt", header = TRUE, sep = "\t")
data4 <- fread("data/2019_S2_NB_FER.txt", header = TRUE, sep = "\t")
data5 <- fread("data/2020_S1_NB_FER.txt", header = TRUE, sep = "\t")
data6 <- fread("data/2020_S2_NB_FER.txt", header = TRUE, sep = "\t")
data7 <- fread("data/2021_S1_NB_FER.txt", header = TRUE, sep = "\t")
data8 <- fread("data/2021_S2_NB_FER.txt", header = TRUE, sep = "\t")
data9 <- fread("data/2022_S1_NB_FER.txt", header = TRUE, sep = "\t")
data10 <- fread("data/2022_S2_NB_FER.txt", header = TRUE, sep = ";")
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Use lapply to print the column names and types
lapply(seq_along(data_list), function(i) {
cat("\n--- Structure of dataset", i, "---\n")
print(str(data_list[[i]]))
})
data11 <- fread("data/data-rf-2023-s1.csv", header = TRUE)
head(data11)
# Optionally, you can get just the column names and their respective types:
column_types <- sapply(data11, class)
print(column_types)
data11 <- fread("data/data-rf-2023-s1.csv", header = TRUE)
head(data11)
# Optionally, you can get just the column names and their respective types:
column_types <- sapply(data11, class)
print(column_types)
data11 <- fread("data/data-rf-2023-s1.csv", header = TRUE)
head(data11)
# Optionally, you can get just the column names and their respective types:
column_types <- sapply(data11, class)
print(column_types)
# Convert JOUR column from IDate to Date
data11[, JOUR := as.Date(JOUR)]
# Verify the change
str(data11)
# Store all data tables in a list
data_list <- list(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10)
# Convert 'JOUR' column to Date type for all datasets
data_list <- lapply(data_list, function(dataset) {
dataset$JOUR <- as.Date(dataset$JOUR, format = "%d/%m/%Y")
return(dataset)
})
# Print the head of each dataset
lapply(seq_along(data_list), function(i) {
cat("\n--- Head of dataset", i, "---\n")
print(head(data_list[[i]]))
})
# Convert the 'JOUR' column from IDate to Date
data11$JOUR <- as.Date(data11$JOUR)
# Check the column types again to confirm the change
column_types <- sapply(data11, class)
print(column_types)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
# Combine the data list and data11
combined_data <- rbindlist(c(data_list, list(data11)), fill = TRUE)
# Save the combined data to a CSV file
write.csv(combined_data, "combined_data.csv", row.names = FALSE)
str(combined_data)  # Gives structure of the dataset including column names, types, and a preview
# Assuming your data.table is named dt
# Convert CODE_STIF_RES and CODE_STIF_ARRET to integer in place
dt[, CODE_STIF_RES := as.integer(CODE_STIF_RES)]
# Assuming your data.table is named dt
# Convert CODE_STIF_RES and CODE_STIF_ARRET to integer in place
combined_data[, CODE_STIF_RES := as.integer(CODE_STIF_RES)]
combined_data[, CODE_STIF_ARRET := as.integer(CODE_STIF_ARRET)]
# Vérification des types des colonnes
str(combined_data)
head(combined_data)
# Identify numeric columns
numeric_cols <- names(dt)[sapply(dt, is.numeric)]
# Check for missing values in numeric columns
missing_summary <- sapply(numeric_cols, function(col) sum(is.na(dt[[col]])))
# Print the summary
print("Missing values in numeric columns:")
print(missing_summary)
# Identify numeric columns
numeric_cols <- names(dt)[sapply(dt, is.numeric)]
# Check for missing values in numeric columns
missing_summary <- sapply(numeric_cols, function(col) sum(is.na(dt[[col]])))
# Print the summary
print("Missing values in numeric columns:")
print(missing_summary)
# Identify character columns
char_cols <- names(dt)[sapply(dt, is.character)]
# Check for occurrences of '?' in each character column
missing_char_summary <- sapply(char_cols, function(col) sum(dt[[col]] == "?", na.rm = TRUE))
# Print the summary
print("Occurrences of '?' in character columns:")
print(missing_char_summary)
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(dt$LIBELLE_ARRET == "?", na.rm = TRUE)
# Identify numeric columns
numeric_cols <- names(combined_data)[sapply(combined_data, is.numeric)]
# Check for missing values in numeric columns
missing_summary <- sapply(numeric_cols, function(col) sum(is.na(dt[[col]])))
# Identify numeric columns
numeric_cols <- names(combined_data)[sapply(combined_data, is.numeric)]
# Check for missing values in numeric columns
missing_summary <- sapply(numeric_cols, function(col) sum(is.na(combined_data[[col]])))
# Print the summary
print("Missing values in numeric columns:")
print(missing_summary)
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(combined_data$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(dcombined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(combined_data$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(combined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
missing_rate_res <- sum(is.na(combined_data$CODE_STIF_RES)) / nrow(combined_data)
missing_rate_arret <- sum(is.na(combined_data$CODE_STIF_ARRET)) / nrow(combined_data)
print(paste("Missing rate for CODE_STIF_RES:", missing_rate_res))
print(paste("Missing rate for CODE_STIF_ARRET:", missing_rate_arret))
# Remove rows with any NA values
dt<- na.omit(combined_data)
# Verify the number of rows before and after removal
nrow(combined_data)  # Original number of rows
nrow(dt)  # Number of rows after removal
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(combined_data$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(combined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(combined_data$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(combined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
categorie_titre_percentage <- (categorie_titre_missing / nrow(combined_data)) * 100
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
print(paste("Percentage of '?' in CATEGORIE_TITRE:", round(categorie_titre_percentage, 2), "%"))
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(combined_data$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(combined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
categorie_titre_percentage <- (categorie_titre_missing / nrow(combined_data)) * 100
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
print(paste("Percentage of '?' in CATEGORIE_TITRE:", round(categorie_titre_percentage, 2), "%"))
combined_data_cleaned <- combined_data[combined_data$CATEGORIE_TITRE != "?", ]
combined_data_cleaned <- combined_data[combined_data$CATEGORIE_TITRE != "?", ]
categorie_titre_missing <- sum(combined_data$CATEGORIE_TITRE == "?", na.rm = TRUE)
combined_data_cleaned <- combined_data[combined_data$CATEGORIE_TITRE != "?", ]
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
# Count occurrences of '?' in LIBELLE_ARRET
libelle_arret_missing <- sum(dt$LIBELLE_ARRET == "?", na.rm = TRUE)
print(paste("Occurrences of '?' in LIBELLE_ARRET:", libelle_arret_missing))
# Count occurrences of '?' in CATEGORIE_TITRE
categorie_titre_missing <- sum(dt$CATEGORIE_TITRE == "?", na.rm = TRUE)
categorie_titre_percentage <- (categorie_titre_missing / nrow(dt)) * 100
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
print(paste("Percentage of '?' in CATEGORIE_TITRE:", round(categorie_titre_percentage, 2), "%"))
dt_cleaned <- dt[combined_data$CATEGORIE_TITRE != "?", ]
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
# Remove rows with any NA values
dt<- na.omit(combined_data)
# Verify the number of rows before and after removal
nrow(combined_data)  # Original number of rows
nrow(dt)  # Number of rows after removal
dt_cleaned <- dt[combined_data$CATEGORIE_TITRE != "?", ]
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
dt_cleaned <- dt[dt$CATEGORIE_TITRE != "?", ]
print(paste("Occurrences of '?' in CATEGORIE_TITRE:", categorie_titre_missing))
dt_cleaned <- dt[dt$CATEGORIE_TITRE != "?", ]
# Verify the number of rows before and after removal
nrow(dt_cleaned)  # Original number of rows
nrow(dt)  # Number of rows after removal
# Boxplot for each numerical column
boxplot(combined_data$CODE_STIF_TRNS, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
# Boxplot for each numerical column
boxplot(dt_cleaned$CODE_STIF_TRNS, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
boxplot(combined_data$CODE_STIF_RES, main = "Boxplot of NB_VALD", ylab = "NB_VALD")
boxplot(combined_data$CODE_STIF_RES, main = "Boxplot of CODE_STIF_RES ", ylab = "CODE_STIF_RES ")
boxplot(dt_cleaned$CODE_STIF_RES, main = "Boxplot of CODE_STIF_RES ", ylab = "CODE_STIF_RES ")
boxplot(dt_cleaned$CODE_STIF_ARRET, main = "Boxplot of CODE_STIF_RES ", ylab = "CODE_STIF_ARRET ")
boxplot(dt_cleaned$ID_REFA_LDA, main = "Boxplot of ID_REFA_LDA ", ylab = "ID_REFA_LDA ")
boxplot(dt_cleaned$NB_VALD, main = "Boxplot of NB_VALD  ", ylab = "NB_VALD  ")
